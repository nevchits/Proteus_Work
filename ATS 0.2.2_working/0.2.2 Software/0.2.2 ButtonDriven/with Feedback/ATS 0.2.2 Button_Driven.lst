;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28-Jul-14 10:32:12
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28E1      	GOTO       225
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00B2      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00B3      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;ATS 0.2.2 Button_Driven.c,87 :: 		void interrupt() {       //TMR0 Interrupt Handler
;ATS 0.2.2 Button_Driven.c,91 :: 		GIE_Bit = 0;
0x000D	0x138B      	BCF        GIE_bit, 7
;ATS 0.2.2 Button_Driven.c,93 :: 		if (T0IF_Bit) {         //TMR0 Interrupt
0x000E	0x1D0B      	BTFSS      T0IF_bit, 2
0x000F	0x2849      	GOTO       L_interrupt0
;ATS 0.2.2 Button_Driven.c,95 :: 		T0IF_Bit = 0;        //reset interrupt flag
0x0010	0x110B      	BCF        T0IF_bit, 2
;ATS 0.2.2 Button_Driven.c,96 :: 		TMR0 = 0;            //reset timer
0x0011	0x0181      	CLRF       TMR0
;ATS 0.2.2 Button_Driven.c,97 :: 		ProgTimer++;         //timer that is incremented whenever TMR0
0x0012	0x0AB0      	INCF       _ProgTimer, 1
0x0013	0x1903      	BTFSC      STATUS, 2
0x0014	0x0AB1      	INCF       _ProgTimer+1, 1
;ATS 0.2.2 Button_Driven.c,99 :: 		if (progTimer == 1953)
0x0015	0x0831      	MOVF       _ProgTimer+1, 0
0x0016	0x3A07      	XORLW      7
0x0017	0x1D03      	BTFSS      STATUS, 2
0x0018	0x281B      	GOTO       L__interrupt53
0x0019	0x30A1      	MOVLW      161
0x001A	0x0630      	XORWF      _ProgTimer, 0
L__interrupt53:
0x001B	0x1D03      	BTFSS      STATUS, 2
0x001C	0x2849      	GOTO       L_interrupt1
;ATS 0.2.2 Button_Driven.c,101 :: 		RealTimer++;      //one-second timer
0x001D	0x0AAE      	INCF       _RealTimer, 1
0x001E	0x1903      	BTFSC      STATUS, 2
0x001F	0x0AAF      	INCF       _RealTimer+1, 1
;ATS 0.2.2 Button_Driven.c,104 :: 		if (RunTimer == RunTime) { //when Run Time Reaches Max, Cooldown
0x0020	0x0829      	MOVF       _RunTimer+1, 0
0x0021	0x062B      	XORWF      _RunTime+1, 0
0x0022	0x1D03      	BTFSS      STATUS, 2
0x0023	0x2826      	GOTO       L__interrupt54
0x0024	0x082A      	MOVF       _RunTime, 0
0x0025	0x0628      	XORWF      _RunTimer, 0
L__interrupt54:
0x0026	0x1D03      	BTFSS      STATUS, 2
0x0027	0x282C      	GOTO       L_interrupt2
;ATS 0.2.2 Button_Driven.c,105 :: 		RunTimer = 0;
0x0028	0x01A8      	CLRF       _RunTimer
0x0029	0x01A9      	CLRF       _RunTimer+1
;ATS 0.2.2 Button_Driven.c,106 :: 		Run_flag = 0;         //Stop Procedure requested.
0x002A	0x1021      	BCF        _Run_Flag, BitPos(_Run_Flag+0)
;ATS 0.2.2 Button_Driven.c,107 :: 		CoolDown_Flag = 1;
0x002B	0x15A1      	BSF        _CoolDown_Flag, BitPos(_CoolDown_Flag+0)
;ATS 0.2.2 Button_Driven.c,108 :: 		}
L_interrupt2:
;ATS 0.2.2 Button_Driven.c,110 :: 		if (CoolDownTimer == CoolDownTime) {
0x002C	0x0827      	MOVF       _CoolDownTimer+1, 0
0x002D	0x062D      	XORWF      _CoolDownTime+1, 0
0x002E	0x1D03      	BTFSS      STATUS, 2
0x002F	0x2832      	GOTO       L__interrupt55
0x0030	0x082C      	MOVF       _CoolDownTime, 0
0x0031	0x0626      	XORWF      _CoolDownTimer, 0
L__interrupt55:
0x0032	0x1D03      	BTFSS      STATUS, 2
0x0033	0x2837      	GOTO       L_interrupt3
;ATS 0.2.2 Button_Driven.c,111 :: 		CoolDownTimer = 0;
0x0034	0x01A6      	CLRF       _CoolDownTimer
0x0035	0x01A7      	CLRF       _CoolDownTimer+1
;ATS 0.2.2 Button_Driven.c,113 :: 		CoolDown_Flag = 0;
0x0036	0x11A1      	BCF        _CoolDown_Flag, BitPos(_CoolDown_Flag+0)
;ATS 0.2.2 Button_Driven.c,114 :: 		}
L_interrupt3:
;ATS 0.2.2 Button_Driven.c,117 :: 		if (Run_Flag && Feedback) RunTimer++;
0x0037	0x1C21      	BTFSS      _Run_Flag, BitPos(_Run_Flag+0)
0x0038	0x283E      	GOTO       L_interrupt6
0x0039	0x1E05      	BTFSS      RA4_bit, 4
0x003A	0x283E      	GOTO       L_interrupt6
L__interrupt47:
0x003B	0x0AA8      	INCF       _RunTimer, 1
0x003C	0x1903      	BTFSC      STATUS, 2
0x003D	0x0AA9      	INCF       _RunTimer+1, 1
L_interrupt6:
;ATS 0.2.2 Button_Driven.c,118 :: 		if (CoolDown_Flag) CoolDownTimer++;
0x003E	0x1DA1      	BTFSS      _CoolDown_Flag, BitPos(_CoolDown_Flag+0)
0x003F	0x2843      	GOTO       L_interrupt7
0x0040	0x0AA6      	INCF       _CoolDownTimer, 1
0x0041	0x1903      	BTFSC      STATUS, 2
0x0042	0x0AA7      	INCF       _CoolDownTimer+1, 1
L_interrupt7:
;ATS 0.2.2 Button_Driven.c,120 :: 		SQOUT=~SQOUT;
0x0043	0x3001      	MOVLW      1
0x0044	0x0685      	XORWF      RA0_bit, 1
;ATS 0.2.2 Button_Driven.c,121 :: 		SQOUT=~SQOUT;
0x0045	0x3001      	MOVLW      1
0x0046	0x0685      	XORWF      RA0_bit, 1
;ATS 0.2.2 Button_Driven.c,122 :: 		progTimer = 0;        //reset prog timer
0x0047	0x01B0      	CLRF       _ProgTimer
0x0048	0x01B1      	CLRF       _ProgTimer+1
;ATS 0.2.2 Button_Driven.c,123 :: 		}
L_interrupt1:
;ATS 0.2.2 Button_Driven.c,124 :: 		}
L_interrupt0:
;ATS 0.2.2 Button_Driven.c,125 :: 		if (INTF_Bit) {           //Pressing "Stop" forced Stop, Turn Off all
0x0049	0x1C8B      	BTFSS      INTF_bit, 1
0x004A	0x2852      	GOTO       L_interrupt8
;ATS 0.2.2 Button_Driven.c,126 :: 		INTF_Bit = 0;          //reset interrupt
0x004B	0x108B      	BCF        INTF_bit, 1
;ATS 0.2.2 Button_Driven.c,128 :: 		CrankTrials = 6;      //just to kick it out of the crank...
0x004C	0x3006      	MOVLW      6
0x004D	0x00A5      	MOVWF      _CrankTrials
;ATS 0.2.2 Button_Driven.c,129 :: 		RBValue = 19;          //so that it falls into "Default"
0x004E	0x3013      	MOVLW      19
0x004F	0x00A2      	MOVWF      _RBValue
;ATS 0.2.2 Button_Driven.c,130 :: 		Auto_Flag = 0;
0x0050	0x10A1      	BCF        _Auto_Flag, BitPos(_Auto_Flag+0)
;ATS 0.2.2 Button_Driven.c,131 :: 		Run_Flag = 0;
0x0051	0x1021      	BCF        _Run_Flag, BitPos(_Run_Flag+0)
;ATS 0.2.2 Button_Driven.c,132 :: 		}
L_interrupt8:
;ATS 0.2.2 Button_Driven.c,133 :: 		GIE_Bit = 1;
0x0052	0x178B      	BSF        GIE_bit, 7
;ATS 0.2.2 Button_Driven.c,134 :: 		}
L__interrupt52:
0x0053	0x0820      	MOVF       32, 0
0x0054	0x00F0      	MOVWF      R0
0x0055	0x0833      	MOVF       ___savePCLATH, 0
0x0056	0x008A      	MOVWF      PCLATH
0x0057	0x0E32      	SWAPF      ___saveSTATUS, 0
0x0058	0x0083      	MOVWF      STATUS
0x0059	0x0EFF      	SWAPF      R15, 1
0x005A	0x0E7F      	SWAPF      R15, 0
0x005B	0x0009      	RETFIE
; end of _interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x005C	0x1283      	BCF        STATUS, 5
0x005D	0x1303      	BCF        STATUS, 6
0x005E	0x0824      	MOVF       ___DoICPAddr+1, 0
0x005F	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0060	0x0823      	MOVF       ___DoICPAddr, 0
0x0061	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
0x0062	0x0008      	RETURN
; end of _____DoICP
_crank:
;ATS 0.2.2 Button_Driven.c,268 :: 		void crank() { //Crank till there's feedback. 5X5 seconds before failing.
;ATS 0.2.2 Button_Driven.c,269 :: 		GenFeedFlag = feedback;
0x0063	0x1283      	BCF        STATUS, 5
0x0064	0x1303      	BCF        STATUS, 6
0x0065	0x1A05      	BTFSC      RA4_bit, 4
0x0066	0x2869      	GOTO       L__crank56
0x0067	0x1121      	BCF        _GenFeedFlag, BitPos(_GenFeedFlag+0)
0x0068	0x286A      	GOTO       L__crank57
L__crank56:
0x0069	0x1521      	BSF        _GenFeedFlag, BitPos(_GenFeedFlag+0)
L__crank57:
;ATS 0.2.2 Button_Driven.c,270 :: 		CrankTrials = 0;
0x006A	0x01A5      	CLRF       _CrankTrials
;ATS 0.2.2 Button_Driven.c,271 :: 		while (!GenFeedFlag && CrankTrials <5) {
L_crank28:
0x006B	0x1921      	BTFSC      _GenFeedFlag, BitPos(_GenFeedFlag+0)
0x006C	0x2893      	GOTO       L_crank29
0x006D	0x3005      	MOVLW      5
0x006E	0x0225      	SUBWF      _CrankTrials, 0
0x006F	0x1803      	BTFSC      STATUS, 0
0x0070	0x2893      	GOTO       L_crank29
L__crank49:
;ATS 0.2.2 Button_Driven.c,272 :: 		GenStart = 1;
0x0071	0x1706      	BSF        RB6_bit, 6
;ATS 0.2.2 Button_Driven.c,273 :: 		delay_ms(5000);
0x0072	0x301A      	MOVLW      26
0x0073	0x00FB      	MOVWF      R11
0x0074	0x305E      	MOVLW      94
0x0075	0x00FC      	MOVWF      R12
0x0076	0x306E      	MOVLW      110
0x0077	0x00FD      	MOVWF      R13
L_crank32:
0x0078	0x0BFD      	DECFSZ     R13, 1
0x0079	0x2878      	GOTO       L_crank32
0x007A	0x0BFC      	DECFSZ     R12, 1
0x007B	0x2878      	GOTO       L_crank32
0x007C	0x0BFB      	DECFSZ     R11, 1
0x007D	0x2878      	GOTO       L_crank32
0x007E	0x0000      	NOP
;ATS 0.2.2 Button_Driven.c,274 :: 		CrankTrials++;
0x007F	0x0AA5      	INCF       _CrankTrials, 1
;ATS 0.2.2 Button_Driven.c,275 :: 		GenFeedFlag = feedback;
0x0080	0x1A05      	BTFSC      RA4_bit, 4
0x0081	0x2884      	GOTO       L__crank58
0x0082	0x1121      	BCF        _GenFeedFlag, BitPos(_GenFeedFlag+0)
0x0083	0x2885      	GOTO       L__crank59
L__crank58:
0x0084	0x1521      	BSF        _GenFeedFlag, BitPos(_GenFeedFlag+0)
L__crank59:
;ATS 0.2.2 Button_Driven.c,276 :: 		if (CrankTrials == 5) {
0x0085	0x0825      	MOVF       _CrankTrials, 0
0x0086	0x3A05      	XORLW      5
0x0087	0x1D03      	BTFSS      STATUS, 2
0x0088	0x2890      	GOTO       L_crank33
;ATS 0.2.2 Button_Driven.c,277 :: 		CrankTrials = 0;
0x0089	0x01A5      	CLRF       _CrankTrials
;ATS 0.2.2 Button_Driven.c,278 :: 		GenFeedFlag = 1;
0x008A	0x1521      	BSF        _GenFeedFlag, BitPos(_GenFeedFlag+0)
;ATS 0.2.2 Button_Driven.c,279 :: 		PORTB = 0;
0x008B	0x0186      	CLRF       PORTB
;ATS 0.2.2 Button_Driven.c,280 :: 		Run_Flag = 0;
0x008C	0x1021      	BCF        _Run_Flag, BitPos(_Run_Flag+0)
;ATS 0.2.2 Button_Driven.c,281 :: 		RBValue = 19;  //Falls to "Default
0x008D	0x3013      	MOVLW      19
0x008E	0x00A2      	MOVWF      _RBValue
;ATS 0.2.2 Button_Driven.c,283 :: 		}
0x008F	0x2891      	GOTO       L_crank34
L_crank33:
;ATS 0.2.2 Button_Driven.c,284 :: 		else Run_Flag = 1;
0x0090	0x1421      	BSF        _Run_Flag, BitPos(_Run_Flag+0)
L_crank34:
;ATS 0.2.2 Button_Driven.c,285 :: 		GenStart = 0;      //Stop Cranking
0x0091	0x1306      	BCF        RB6_bit, 6
;ATS 0.2.2 Button_Driven.c,286 :: 		} //while
0x0092	0x286B      	GOTO       L_crank28
L_crank29:
;ATS 0.2.2 Button_Driven.c,287 :: 		}//crank
0x0093	0x0008      	RETURN
; end of _crank
_Poll:
;ATS 0.2.2 Button_Driven.c,290 :: 		void Poll() {
;ATS 0.2.2 Button_Driven.c,291 :: 		if (Auto_Flag && ZESA) {
0x0094	0x1283      	BCF        STATUS, 5
0x0095	0x1303      	BCF        STATUS, 6
0x0096	0x1CA1      	BTFSS      _Auto_Flag, BitPos(_Auto_Flag+0)
0x0097	0x28AC      	GOTO       L_Poll37
0x0098	0x1D05      	BTFSS      RA2_bit, 2
0x0099	0x28AC      	GOTO       L_Poll37
L__Poll51:
;ATS 0.2.2 Button_Driven.c,292 :: 		delay_ms(2000);
0x009A	0x300B      	MOVLW      11
0x009B	0x00FB      	MOVWF      R11
0x009C	0x3026      	MOVLW      38
0x009D	0x00FC      	MOVWF      R12
0x009E	0x305D      	MOVLW      93
0x009F	0x00FD      	MOVWF      R13
L_Poll38:
0x00A0	0x0BFD      	DECFSZ     R13, 1
0x00A1	0x28A0      	GOTO       L_Poll38
0x00A2	0x0BFC      	DECFSZ     R12, 1
0x00A3	0x28A0      	GOTO       L_Poll38
0x00A4	0x0BFB      	DECFSZ     R11, 1
0x00A5	0x28A0      	GOTO       L_Poll38
0x00A6	0x0000      	NOP
0x00A7	0x0000      	NOP
;ATS 0.2.2 Button_Driven.c,293 :: 		ChangeOver = 0;    // make sure you revert to ZESA Supply
0x00A8	0x1286      	BCF        RB5_bit, 5
;ATS 0.2.2 Button_Driven.c,294 :: 		RBValue = 19;       //Fall to Default
0x00A9	0x3013      	MOVLW      19
0x00AA	0x00A2      	MOVWF      _RBValue
;ATS 0.2.2 Button_Driven.c,296 :: 		}
0x00AB	0x28D4      	GOTO       L_Poll39
L_Poll37:
;ATS 0.2.2 Button_Driven.c,298 :: 		delay_ms(1000);    //Just wait...
0x00AC	0x3006      	MOVLW      6
0x00AD	0x00FB      	MOVWF      R11
0x00AE	0x3013      	MOVLW      19
0x00AF	0x00FC      	MOVWF      R12
0x00B0	0x30AD      	MOVLW      173
0x00B1	0x00FD      	MOVWF      R13
L_Poll40:
0x00B2	0x0BFD      	DECFSZ     R13, 1
0x00B3	0x28B2      	GOTO       L_Poll40
0x00B4	0x0BFC      	DECFSZ     R12, 1
0x00B5	0x28B2      	GOTO       L_Poll40
0x00B6	0x0BFB      	DECFSZ     R11, 1
0x00B7	0x28B2      	GOTO       L_Poll40
0x00B8	0x0000      	NOP
0x00B9	0x0000      	NOP
;ATS 0.2.2 Button_Driven.c,299 :: 		if (!Run_flag) {  //if the Gen is running, leave and Poll
0x00BA	0x1821      	BTFSC      _Run_Flag, BitPos(_Run_Flag+0)
0x00BB	0x28D4      	GOTO       L_Poll41
;ATS 0.2.2 Button_Driven.c,300 :: 		if (!CoolDown_Flag) {
0x00BC	0x19A1      	BTFSC      _CoolDown_Flag, BitPos(_CoolDown_Flag+0)
0x00BD	0x28D4      	GOTO       L_Poll42
;ATS 0.2.2 Button_Driven.c,301 :: 		GenStop = 1;
0x00BE	0x1606      	BSF        RB4_bit, 4
;ATS 0.2.2 Button_Driven.c,302 :: 		GenOn = 1;
0x00BF	0x1786      	BSF        RB7_bit, 7
;ATS 0.2.2 Button_Driven.c,303 :: 		crank();   //...and run the Generator Start/ crank Routine.
0x00C0	0x2063      	CALL       _crank
;ATS 0.2.2 Button_Driven.c,304 :: 		Delay_ms(5000);     //Stabilize
0x00C1	0x301A      	MOVLW      26
0x00C2	0x00FB      	MOVWF      R11
0x00C3	0x305E      	MOVLW      94
0x00C4	0x00FC      	MOVWF      R12
0x00C5	0x306E      	MOVLW      110
0x00C6	0x00FD      	MOVWF      R13
L_Poll43:
0x00C7	0x0BFD      	DECFSZ     R13, 1
0x00C8	0x28C7      	GOTO       L_Poll43
0x00C9	0x0BFC      	DECFSZ     R12, 1
0x00CA	0x28C7      	GOTO       L_Poll43
0x00CB	0x0BFB      	DECFSZ     R11, 1
0x00CC	0x28C7      	GOTO       L_Poll43
0x00CD	0x0000      	NOP
;ATS 0.2.2 Button_Driven.c,307 :: 		if (!ZESA && Run_Flag) {
0x00CE	0x1905      	BTFSC      RA2_bit, 2
0x00CF	0x28D4      	GOTO       L_Poll46
0x00D0	0x1C21      	BTFSS      _Run_Flag, BitPos(_Run_Flag+0)
0x00D1	0x28D4      	GOTO       L_Poll46
L__Poll50:
;ATS 0.2.2 Button_Driven.c,308 :: 		ChangeOver = 1;
0x00D2	0x1686      	BSF        RB5_bit, 5
;ATS 0.2.2 Button_Driven.c,309 :: 		Run_Flag = 1;
0x00D3	0x1421      	BSF        _Run_Flag, BitPos(_Run_Flag+0)
;ATS 0.2.2 Button_Driven.c,310 :: 		}//if AutoMode
L_Poll46:
;ATS 0.2.2 Button_Driven.c,311 :: 		}//if !CoolDown_Flag
L_Poll42:
;ATS 0.2.2 Button_Driven.c,312 :: 		} // if !Run Flag
L_Poll41:
;ATS 0.2.2 Button_Driven.c,313 :: 		}//else ZESA is not there
L_Poll39:
;ATS 0.2.2 Button_Driven.c,314 :: 		} //Poll
0x00D4	0x0008      	RETURN
; end of _Poll
___CC2DW:
;__Lib_System.c,24 :: 		
;__Lib_System.c,27 :: 		
_CC2D_Loop1:
;__Lib_System.c,29 :: 		
0x00D5	0x205C      	CALL       _____DoICP
0x00D6	0x118A      	BCF        PCLATH, 3
0x00D7	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,31 :: 		
0x00D8	0x0080      	MOVWF      INDF
;__Lib_System.c,32 :: 		
0x00D9	0x0A84      	INCF       FSR, 1
;__Lib_System.c,33 :: 		
0x00DA	0x0AA3      	INCF       ___DoICPAddr, 1
;__Lib_System.c,35 :: 		
0x00DB	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,36 :: 		
0x00DC	0x0AA4      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,37 :: 		
0x00DD	0x03F0      	DECF       R0, 1
;__Lib_System.c,39 :: 		
0x00DE	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,40 :: 		
0x00DF	0x28D5      	GOTO       _CC2D_Loop1
;__Lib_System.c,42 :: 		
0x00E0	0x0008      	RETURN
; end of ___CC2DW
_main:
;ATS 0.2.2 Button_Driven.c,137 :: 		void main() {
;ATS 0.2.2 Button_Driven.c,140 :: 		ProgTimer = 0;
0x00E1	0x1283      	BCF        STATUS, 5
0x00E2	0x1303      	BCF        STATUS, 6
0x00E3	0x01B0      	CLRF       _ProgTimer
0x00E4	0x01B1      	CLRF       _ProgTimer+1
;ATS 0.2.2 Button_Driven.c,141 :: 		RealTimer = 0;
0x00E5	0x01AE      	CLRF       _RealTimer
0x00E6	0x01AF      	CLRF       _RealTimer+1
;ATS 0.2.2 Button_Driven.c,142 :: 		RunTimer = 0;
0x00E7	0x01A8      	CLRF       _RunTimer
0x00E8	0x01A9      	CLRF       _RunTimer+1
;ATS 0.2.2 Button_Driven.c,143 :: 		CoolDownTimer = 0;
0x00E9	0x01A6      	CLRF       _CoolDownTimer
0x00EA	0x01A7      	CLRF       _CoolDownTimer+1
;ATS 0.2.2 Button_Driven.c,144 :: 		Auto_Flag = 0;
0x00EB	0x10A1      	BCF        _Auto_Flag, BitPos(_Auto_Flag+0)
;ATS 0.2.2 Button_Driven.c,145 :: 		Run_Flag = 0;
0x00EC	0x1021      	BCF        _Run_Flag, BitPos(_Run_Flag+0)
;ATS 0.2.2 Button_Driven.c,146 :: 		CoolDown_Flag = 0;
0x00ED	0x11A1      	BCF        _CoolDown_Flag, BitPos(_CoolDown_Flag+0)
;ATS 0.2.2 Button_Driven.c,147 :: 		GenFeedFlag = 0;
0x00EE	0x1121      	BCF        _GenFeedFlag, BitPos(_GenFeedFlag+0)
;ATS 0.2.2 Button_Driven.c,148 :: 		RunTime = 0;
0x00EF	0x01AA      	CLRF       _RunTime
0x00F0	0x01AB      	CLRF       _RunTime+1
;ATS 0.2.2 Button_Driven.c,149 :: 		CoolDownTime = 0;
0x00F1	0x01AC      	CLRF       _CoolDownTime
0x00F2	0x01AD      	CLRF       _CoolDownTime+1
;ATS 0.2.2 Button_Driven.c,150 :: 		RBValue = 0;
0x00F3	0x01A2      	CLRF       _RBValue
;ATS 0.2.2 Button_Driven.c,151 :: 		CrankTrials = 0;
0x00F4	0x01A5      	CLRF       _CrankTrials
;ATS 0.2.2 Button_Driven.c,156 :: 		RunTime = 14388;   //4 hours - 12 seconds run time
0x00F5	0x3034      	MOVLW      52
0x00F6	0x00AA      	MOVWF      _RunTime
0x00F7	0x3038      	MOVLW      56
0x00F8	0x00AB      	MOVWF      _RunTime+1
;ATS 0.2.2 Button_Driven.c,158 :: 		CoolDownTime = 3599;   //1 hour (- 1 second) cooldown time
0x00F9	0x300F      	MOVLW      15
0x00FA	0x00AC      	MOVWF      _CoolDownTime
0x00FB	0x300E      	MOVLW      14
0x00FC	0x00AD      	MOVWF      _CoolDownTime+1
;ATS 0.2.2 Button_Driven.c,160 :: 		PORTA = 0;
0x00FD	0x0185      	CLRF       PORTA
;ATS 0.2.2 Button_Driven.c,161 :: 		TRISA = 0b10110;       //Following the I-O Table Above(line 50)
0x00FE	0x3016      	MOVLW      22
0x00FF	0x1683      	BSF        STATUS, 5
0x0100	0x0085      	MOVWF      TRISA
;ATS 0.2.2 Button_Driven.c,162 :: 		PORTB = 0;
0x0101	0x1283      	BCF        STATUS, 5
0x0102	0x0186      	CLRF       PORTB
;ATS 0.2.2 Button_Driven.c,163 :: 		TRISB = 0b00001111;   //Following the I-O Table Above
0x0103	0x300F      	MOVLW      15
0x0104	0x1683      	BSF        STATUS, 5
0x0105	0x0086      	MOVWF      TRISB
;ATS 0.2.2 Button_Driven.c,165 :: 		ADCON1 = 0x07;          //PORTA all digital. (16F716)
0x0106	0x3007      	MOVLW      7
0x0107	0x009F      	MOVWF      ADCON1
;ATS 0.2.2 Button_Driven.c,167 :: 		T0IE_Bit = 1;           //Enable TMR0 Interrupt
0x0108	0x168B      	BSF        T0IE_bit, 5
;ATS 0.2.2 Button_Driven.c,168 :: 		INTE_Bit = 1;          //Enable RB0 Interrupt...
0x0109	0x160B      	BSF        INTE_bit, 4
;ATS 0.2.2 Button_Driven.c,169 :: 		INTEDG_Bit = 1;        //...on rising edge of RB0
0x010A	0x1701      	BSF        INTEDG_bit, 6
;ATS 0.2.2 Button_Driven.c,170 :: 		GIE_bit = 1;
0x010B	0x178B      	BSF        GIE_bit, 7
;ATS 0.2.2 Button_Driven.c,174 :: 		T0CS_Bit = 0;    //Select Timer Mode. Timer Starts Now
0x010C	0x1281      	BCF        T0CS_bit, 5
;ATS 0.2.2 Button_Driven.c,175 :: 		TMR0 = 0;        //reset the TMR0 Register
0x010D	0x1283      	BCF        STATUS, 5
0x010E	0x0181      	CLRF       TMR0
;ATS 0.2.2 Button_Driven.c,176 :: 		PSA_Bit = 0;     //Assign Prescaler from WDT to Timer0 when value = 0
0x010F	0x1683      	BSF        STATUS, 5
0x0110	0x1181      	BCF        PSA_bit, 3
;ATS 0.2.2 Button_Driven.c,177 :: 		OPTION_REG &=248;         //Clear Previous Prescaler Values
0x0111	0x30F8      	MOVLW      248
0x0112	0x0581      	ANDWF      OPTION_REG, 1
;ATS 0.2.2 Button_Driven.c,178 :: 		OPTION_REG |=0;     //set Prescaler to 1:2
;ATS 0.2.2 Button_Driven.c,183 :: 		while(1) {                           //Main Endless Loop
L_main9:
;ATS 0.2.2 Button_Driven.c,185 :: 		delay_ms(100);                     //delay for latency (To allow system
0x0113	0x3082      	MOVLW      130
0x0114	0x00FC      	MOVWF      R12
0x0115	0x30DD      	MOVLW      221
0x0116	0x00FD      	MOVWF      R13
L_main11:
0x0117	0x0BFD      	DECFSZ     R13, 1
0x0118	0x2917      	GOTO       L_main11
0x0119	0x0BFC      	DECFSZ     R12, 1
0x011A	0x2917      	GOTO       L_main11
0x011B	0x0000      	NOP
0x011C	0x0000      	NOP
;ATS 0.2.2 Button_Driven.c,191 :: 		if (RBValue != 19) RBValue = PORTB & 0x07;   // 19 is the fallback value
0x011D	0x1283      	BCF        STATUS, 5
0x011E	0x0822      	MOVF       _RBValue, 0
0x011F	0x3A13      	XORLW      19
0x0120	0x1903      	BTFSC      STATUS, 2
0x0121	0x2925      	GOTO       L_main12
0x0122	0x3007      	MOVLW      7
0x0123	0x0506      	ANDWF      PORTB, 0
0x0124	0x00A2      	MOVWF      _RBValue
L_main12:
;ATS 0.2.2 Button_Driven.c,194 :: 		if (!Run_flag && CoolDown_flag) RBValue = 19;   //it's time to cool down
0x0125	0x1821      	BTFSC      _Run_Flag, BitPos(_Run_Flag+0)
0x0126	0x292B      	GOTO       L_main15
0x0127	0x1DA1      	BTFSS      _CoolDown_Flag, BitPos(_CoolDown_Flag+0)
0x0128	0x292B      	GOTO       L_main15
L__main48:
0x0129	0x3013      	MOVLW      19
0x012A	0x00A2      	MOVWF      _RBValue
L_main15:
;ATS 0.2.2 Button_Driven.c,212 :: 		switch(RBValue) {
0x012B	0x2965      	GOTO       L_main16
;ATS 0.2.2 Button_Driven.c,215 :: 		case 4:                                 //Gen Auto Mode Selected
L_main18:
;ATS 0.2.2 Button_Driven.c,216 :: 		Auto_Flag = 1;                     // Gen is in Auto Mode
0x012C	0x14A1      	BSF        _Auto_Flag, BitPos(_Auto_Flag+0)
;ATS 0.2.2 Button_Driven.c,217 :: 		RBValue = 0;
0x012D	0x01A2      	CLRF       _RBValue
;ATS 0.2.2 Button_Driven.c,218 :: 		if (Auto_Flag) Poll();             //call Auto Mode Routine Here
0x012E	0x1CA1      	BTFSS      _Auto_Flag, BitPos(_Auto_Flag+0)
0x012F	0x2931      	GOTO       L_main19
0x0130	0x2094      	CALL       _Poll
L_main19:
;ATS 0.2.2 Button_Driven.c,219 :: 		break;
0x0131	0x2976      	GOTO       L_main17
;ATS 0.2.2 Button_Driven.c,221 :: 		case 6:                                 //Gen Auto Mode Selected
L_main20:
;ATS 0.2.2 Button_Driven.c,222 :: 		Auto_Flag = 1;                     // Gen is in Auto Mode
0x0132	0x14A1      	BSF        _Auto_Flag, BitPos(_Auto_Flag+0)
;ATS 0.2.2 Button_Driven.c,223 :: 		RBValue = 0;
0x0133	0x01A2      	CLRF       _RBValue
;ATS 0.2.2 Button_Driven.c,224 :: 		if (Auto_Flag) Poll();             //call Auto Mode Routine Here
0x0134	0x1CA1      	BTFSS      _Auto_Flag, BitPos(_Auto_Flag+0)
0x0135	0x2937      	GOTO       L_main21
0x0136	0x2094      	CALL       _Poll
L_main21:
;ATS 0.2.2 Button_Driven.c,225 :: 		break;
0x0137	0x2976      	GOTO       L_main17
;ATS 0.2.2 Button_Driven.c,229 :: 		case 2:                                   //Start Button Pressed
L_main22:
;ATS 0.2.2 Button_Driven.c,230 :: 		Auto_Flag = 0;                     //Gen is in Manual Mode
0x0138	0x10A1      	BCF        _Auto_Flag, BitPos(_Auto_Flag+0)
;ATS 0.2.2 Button_Driven.c,231 :: 		GenStop = 1;                         //Turn Off GEN_OFF signal
0x0139	0x1606      	BSF        RB4_bit, 4
;ATS 0.2.2 Button_Driven.c,232 :: 		GenOn = 1;
0x013A	0x1786      	BSF        RB7_bit, 7
;ATS 0.2.2 Button_Driven.c,235 :: 		GenStart = 1;
0x013B	0x1706      	BSF        RB6_bit, 6
;ATS 0.2.2 Button_Driven.c,236 :: 		Run_Flag = 1;
0x013C	0x1421      	BSF        _Run_Flag, BitPos(_Run_Flag+0)
;ATS 0.2.2 Button_Driven.c,238 :: 		RBValue = 0;
0x013D	0x01A2      	CLRF       _RBValue
;ATS 0.2.2 Button_Driven.c,239 :: 		break;
0x013E	0x2976      	GOTO       L_main17
;ATS 0.2.2 Button_Driven.c,243 :: 		case 0:
L_main23:
;ATS 0.2.2 Button_Driven.c,244 :: 		GenStart = 0;  //uncomment for manual cranking
0x013F	0x1306      	BCF        RB6_bit, 6
;ATS 0.2.2 Button_Driven.c,245 :: 		Auto_Flag = 0;
0x0140	0x10A1      	BCF        _Auto_Flag, BitPos(_Auto_Flag+0)
;ATS 0.2.2 Button_Driven.c,246 :: 		RBValue = 0;
0x0141	0x01A2      	CLRF       _RBValue
;ATS 0.2.2 Button_Driven.c,247 :: 		break;
0x0142	0x2976      	GOTO       L_main17
;ATS 0.2.2 Button_Driven.c,251 :: 		default:
L_main24:
;ATS 0.2.2 Button_Driven.c,252 :: 		Auto_Flag = 0;
0x0143	0x10A1      	BCF        _Auto_Flag, BitPos(_Auto_Flag+0)
;ATS 0.2.2 Button_Driven.c,253 :: 		delay_ms(2000);
0x0144	0x300B      	MOVLW      11
0x0145	0x00FB      	MOVWF      R11
0x0146	0x3026      	MOVLW      38
0x0147	0x00FC      	MOVWF      R12
0x0148	0x305D      	MOVLW      93
0x0149	0x00FD      	MOVWF      R13
L_main25:
0x014A	0x0BFD      	DECFSZ     R13, 1
0x014B	0x294A      	GOTO       L_main25
0x014C	0x0BFC      	DECFSZ     R12, 1
0x014D	0x294A      	GOTO       L_main25
0x014E	0x0BFB      	DECFSZ     R11, 1
0x014F	0x294A      	GOTO       L_main25
0x0150	0x0000      	NOP
0x0151	0x0000      	NOP
;ATS 0.2.2 Button_Driven.c,254 :: 		PORTB = 0;       //Turn the Gen Off if none of the conditions are met
0x0152	0x0186      	CLRF       PORTB
;ATS 0.2.2 Button_Driven.c,255 :: 		delay_ms(5000);  //wait for gen to fully stop
0x0153	0x301A      	MOVLW      26
0x0154	0x00FB      	MOVWF      R11
0x0155	0x305E      	MOVLW      94
0x0156	0x00FC      	MOVWF      R12
0x0157	0x306E      	MOVLW      110
0x0158	0x00FD      	MOVWF      R13
L_main26:
0x0159	0x0BFD      	DECFSZ     R13, 1
0x015A	0x2959      	GOTO       L_main26
0x015B	0x0BFC      	DECFSZ     R12, 1
0x015C	0x2959      	GOTO       L_main26
0x015D	0x0BFB      	DECFSZ     R11, 1
0x015E	0x2959      	GOTO       L_main26
0x015F	0x0000      	NOP
;ATS 0.2.2 Button_Driven.c,256 :: 		if (!feedback) Run_Flag = 0; //Ensure Gen is off
0x0160	0x1A05      	BTFSC      RA4_bit, 4
0x0161	0x2963      	GOTO       L_main27
0x0162	0x1021      	BCF        _Run_Flag, BitPos(_Run_Flag+0)
L_main27:
;ATS 0.2.2 Button_Driven.c,257 :: 		RBValue = 0;
0x0163	0x01A2      	CLRF       _RBValue
;ATS 0.2.2 Button_Driven.c,258 :: 		break;         //We need an ERROR Condition Here
0x0164	0x2976      	GOTO       L_main17
;ATS 0.2.2 Button_Driven.c,259 :: 		} //switch
L_main16:
0x0165	0x0822      	MOVF       _RBValue, 0
0x0166	0x3A04      	XORLW      4
0x0167	0x1903      	BTFSC      STATUS, 2
0x0168	0x292C      	GOTO       L_main18
0x0169	0x0822      	MOVF       _RBValue, 0
0x016A	0x3A06      	XORLW      6
0x016B	0x1903      	BTFSC      STATUS, 2
0x016C	0x2932      	GOTO       L_main20
0x016D	0x0822      	MOVF       _RBValue, 0
0x016E	0x3A02      	XORLW      2
0x016F	0x1903      	BTFSC      STATUS, 2
0x0170	0x2938      	GOTO       L_main22
0x0171	0x0822      	MOVF       _RBValue, 0
0x0172	0x3A00      	XORLW      0
0x0173	0x1903      	BTFSC      STATUS, 2
0x0174	0x293F      	GOTO       L_main23
0x0175	0x2943      	GOTO       L_main24
L_main17:
;ATS 0.2.2 Button_Driven.c,262 :: 		}//While
0x0176	0x2913      	GOTO       L_main9
;ATS 0.2.2 Button_Driven.c,264 :: 		}
0x0177	0x2977      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [88]    _interrupt
0x005C       [7]    _____DoICP
0x0063      [49]    _crank
0x0094      [65]    _Poll
0x00D5      [12]    ___CC2DW
0x00E1     [151]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [0]    C_bit
0x0003       [0]    Z_bit
0x0003       [0]    DC_bit
0x0003       [0]    NOT_PD_bit
0x0003       [0]    IRP_bit
0x0003       [1]    STATUS
0x0003       [0]    RP1_bit
0x0003       [0]    NOT_TO_bit
0x0003       [0]    RP0_bit
0x0004       [1]    FSRPTR
0x0004       [1]    FSR
0x0005       [0]    SQOUT
0x0005       [0]    RA0_bit
0x0005       [0]    ZESA
0x0005       [0]    feedback
0x0005       [0]    RA4_bit
0x0005       [0]    RA5_bit
0x0005       [0]    RA3_bit
0x0005       [0]    RA1_bit
0x0005       [0]    RA2_bit
0x0005       [1]    PORTA
0x0006       [0]    RB5_bit
0x0006       [0]    RB4_bit
0x0006       [0]    RB3_bit
0x0006       [1]    PORTB
0x0006       [0]    RB7_bit
0x0006       [0]    RB6_bit
0x0006       [0]    GenStart
0x0006       [0]    ChangeOver
0x0006       [0]    GenStop
0x0006       [0]    GenOn
0x0006       [0]    RB2_bit
0x0006       [0]    RB1_bit
0x0006       [0]    RB0_bit
0x0007       [0]    RC3_bit
0x0007       [0]    RC7_bit
0x0007       [0]    RC6_bit
0x0007       [0]    RC0_bit
0x0007       [0]    RC1_bit
0x0007       [0]    RC2_bit
0x0007       [1]    PORTC
0x0007       [0]    RC4_bit
0x0007       [0]    RC5_bit
0x0008       [0]    RD6_bit
0x0008       [0]    RD7_bit
0x0008       [0]    RD5_bit
0x0008       [0]    RD3_bit
0x0008       [0]    RD4_bit
0x0008       [0]    RD1_bit
0x0008       [0]    RD2_bit
0x0008       [1]    PORTD
0x0008       [0]    RD0_bit
0x0009       [0]    RE1_bit
0x0009       [0]    RE0_bit
0x0009       [0]    RE2_bit
0x0009       [1]    PORTE
0x000A       [1]    PCLATH
0x000B       [0]    TMR0IF_bit
0x000B       [0]    INTE_bit
0x000B       [0]    PEIE_bit
0x000B       [0]    T0IE_bit
0x000B       [0]    TMR0IE_bit
0x000B       [0]    GIE_bit
0x000B       [1]    INTCON
0x000B       [0]    T0IF_bit
0x000B       [0]    INTF_bit
0x000B       [0]    RBIF_bit
0x000B       [0]    RBIE_bit
0x000C       [0]    TXIF_bit
0x000C       [0]    CCP1IF_bit
0x000C       [0]    RCIF_bit
0x000C       [0]    ADIF_bit
0x000C       [0]    TMR1IF_bit
0x000C       [0]    SSPIF_bit
0x000C       [1]    PIR1
0x000C       [0]    PSPIF_bit
0x000C       [0]    TMR2IF_bit
0x000D       [0]    CMIF_bit
0x000D       [0]    CCP2IF_bit
0x000D       [0]    BCLIF_bit
0x000D       [1]    PIR2
0x000D       [0]    EEIF_bit
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [0]    NOT_T1SYNC_bit
0x0010       [0]    T1INSYNC_bit
0x0010       [0]    T1OSCEN_bit
0x0010       [0]    T1CKPS1_bit
0x0010       [0]    T1CKPS0_bit
0x0010       [0]    TMR1ON_bit
0x0010       [1]    T1CON
0x0010       [0]    T1SYNC_bit
0x0010       [0]    TMR1CS_bit
0x0011       [1]    TMR2
0x0012       [0]    TOUTPS1_bit
0x0012       [0]    TOUTPS0_bit
0x0012       [0]    TOUTPS3_bit
0x0012       [0]    TOUTPS2_bit
0x0012       [0]    TMR2ON_bit
0x0012       [1]    T2CON
0x0012       [0]    T2CKPS0_bit
0x0012       [0]    T2CKPS1_bit
0x0013       [1]    SSPBUF
0x0014       [0]    CKP_bit
0x0014       [0]    SSPEN_bit
0x0014       [0]    SSPOV_bit
0x0014       [0]    SSPM2_bit
0x0014       [0]    SSPM1_bit
0x0014       [1]    SSPCON
0x0014       [0]    SSPM0_bit
0x0014       [0]    WCOL_bit
0x0014       [0]    SSPM3_bit
0x0015       [1]    CCPR1L
0x0015       [2]    CCPR1
0x0016       [1]    CCPR1H
0x0017       [0]    CCP1Y_bit
0x0017       [1]    CCP1CON
0x0017       [0]    CCP1M3_bit
0x0017       [0]    CCP1M0_bit
0x0017       [0]    CCP1M2_bit
0x0017       [0]    CCP1M1_bit
0x0017       [0]    CCP1X_bit
0x0018       [0]    RC8_9_bit
0x0018       [0]    SREN_bit
0x0018       [0]    CREN_bit
0x0018       [0]    NOT_RC8_bit
0x0018       [0]    RX9_bit
0x0018       [0]    SPEN_bit
0x0018       [0]    RC9_bit
0x0018       [1]    RCSTA
0x0018       [0]    FERR_bit
0x0018       [0]    OERR_bit
0x0018       [0]    RCD8_bit
0x0018       [0]    RX9D_bit
0x0018       [0]    ADDEN_bit
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x001B       [1]    CCPR2L
0x001B       [2]    CCPR2
0x001C       [1]    CCPR2H
0x001D       [0]    CCP2M2_bit
0x001D       [0]    CCP2M3_bit
0x001D       [0]    CCP2M1_bit
0x001D       [0]    CCP2M0_bit
0x001D       [1]    CCP2CON
0x001D       [0]    CCP2X_bit
0x001D       [0]    CCP2Y_bit
0x001E       [1]    ADRESH
0x001F       [0]    GO_bit
0x001F       [0]    CHS0_bit
0x001F       [0]    CHS1_bit
0x001F       [0]    NOT_DONE_bit
0x001F       [1]    ADCON0
0x001F       [0]    ADON_bit
0x001F       [0]    GO_DONE_bit
0x001F       [0]    ADCS0_bit
0x001F       [0]    ADCS1_bit
0x001F       [0]    CHS2_bit
0x0021       [0]    _Run_Flag
0x0021       [0]    _CoolDown_Flag
0x0021       [0]    _Auto_Flag
0x0021       [0]    _GenFeedFlag
0x0022       [1]    _RBValue
0x0023       [2]    ___DoICPAddr
0x0025       [1]    _CrankTrials
0x0026       [2]    _CoolDownTimer
0x0028       [2]    _RunTimer
0x002A       [2]    _RunTime
0x002C       [2]    _CoolDownTime
0x002E       [2]    _RealTimer
0x0030       [2]    _ProgTimer
0x0032       [1]    ___saveSTATUS
0x0033       [1]    ___savePCLATH
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [0]    PS2_bit
0x0081       [0]    T0SE_bit
0x0081       [0]    T0CS_bit
0x0081       [0]    PSA_bit
0x0081       [0]    PS1_bit
0x0081       [0]    PS0_bit
0x0081       [0]    NOT_RBPU_bit
0x0081       [1]    OPTION_REG
0x0081       [0]    INTEDG_bit
0x0085       [0]    TRISA5_bit
0x0085       [0]    TRISA4_bit
0x0085       [1]    TRISA
0x0085       [0]    TRISA0_bit
0x0085       [0]    TRISA3_bit
0x0085       [0]    TRISA1_bit
0x0085       [0]    TRISA2_bit
0x0086       [0]    TRISB3_bit
0x0086       [0]    TRISB2_bit
0x0086       [0]    TRISB7_bit
0x0086       [0]    TRISB1_bit
0x0086       [1]    TRISB
0x0086       [0]    TRISB5_bit
0x0086       [0]    TRISB0_bit
0x0086       [0]    TRISB4_bit
0x0086       [0]    TRISB6_bit
0x0087       [0]    TRISC7_bit
0x0087       [0]    TRISC6_bit
0x0087       [0]    TRISC5_bit
0x0087       [0]    TRISC1_bit
0x0087       [0]    TRISC0_bit
0x0087       [1]    TRISC
0x0087       [0]    TRISC4_bit
0x0087       [0]    TRISC3_bit
0x0087       [0]    TRISC2_bit
0x0088       [0]    TRISD0_bit
0x0088       [1]    TRISD
0x0088       [0]    TRISD4_bit
0x0088       [0]    TRISD3_bit
0x0088       [0]    TRISD1_bit
0x0088       [0]    TRISD7_bit
0x0088       [0]    TRISD5_bit
0x0088       [0]    TRISD6_bit
0x0088       [0]    TRISD2_bit
0x0089       [0]    IBF_TRISE_bit
0x0089       [0]    PSPMODE_TRISE_bit
0x0089       [0]    IBOV_TRISE_bit
0x0089       [0]    OBF_TRISE_bit
0x0089       [1]    TRISE
0x0089       [0]    OBF_bit
0x0089       [0]    TRISE2_bit
0x0089       [0]    IBOV_bit
0x0089       [0]    PSPMODE_bit
0x0089       [0]    TRISE0_bit
0x0089       [0]    TRISE1_bit
0x0089       [0]    IBF_bit
0x008C       [0]    TMR1IE_bit
0x008C       [0]    SSPIE_bit
0x008C       [1]    PIE1
0x008C       [0]    RCIE_bit
0x008C       [0]    TXIE_bit
0x008C       [0]    ADIE_bit
0x008C       [0]    PSPIE_bit
0x008C       [0]    CCP1IE_bit
0x008C       [0]    TMR2IE_bit
0x008D       [0]    BCLIE_bit
0x008D       [0]    EEIE_bit
0x008D       [0]    CCP2IE_bit
0x008D       [1]    PIE2
0x008D       [0]    CMIE_bit
0x008E       [0]    NOT_BO_bit
0x008E       [0]    NOT_BOR_bit
0x008E       [1]    PCON
0x008E       [0]    NOT_POR_bit
0x0091       [0]    SEN_bit
0x0091       [1]    SSPCON2
0x0091       [0]    GCEN_bit
0x0091       [0]    ACKDT_bit
0x0091       [0]    PEN_bit
0x0091       [0]    ACKEN_bit
0x0091       [0]    RCEN_bit
0x0091       [0]    ACKSTAT_bit
0x0091       [0]    RSEN_bit
0x0092       [1]    PR2
0x0093       [1]    SSPADD
0x0094       [0]    CKE_bit
0x0094       [0]    D_bit
0x0094       [1]    SSPSTAT
0x0094       [0]    SMP_bit
0x0094       [0]    R_bit
0x0094       [0]    NOT_ADDRESS_bit
0x0094       [0]    I2C_READ_bit
0x0094       [0]    NOT_W_bit
0x0094       [0]    NOT_A_bit
0x0094       [0]    D_A_bit
0x0094       [0]    S_bit
0x0094       [0]    I2C_STOP__bit
0x0094       [0]    I2C_START__bit
0x0094       [0]    DATA_ADDRESS_bit
0x0094       [0]    P_bit
0x0094       [0]    NOT_WRITE_bit
0x0094       [0]    UA_bit
0x0094       [0]    BF_bit
0x0094       [0]    I2C_DATA_bit
0x0094       [0]    READ_WRITE_bit
0x0094       [0]    R_W_bit
0x0098       [0]    TX8_9_bit
0x0098       [0]    TXD8_bit
0x0098       [0]    TX9_bit
0x0098       [0]    CSRC_bit
0x0098       [0]    NOT_TX8_bit
0x0098       [1]    TXSTA
0x0098       [0]    BRGH_bit
0x0098       [0]    SYNC_bit
0x0098       [0]    TXEN_bit
0x0098       [0]    TX9D_bit
0x0098       [0]    TRMT_bit
0x0099       [1]    SPBRG
0x009C       [0]    C2OUT_bit
0x009C       [0]    C1OUT_bit
0x009C       [0]    CM0_bit
0x009C       [0]    CM1_bit
0x009C       [0]    C2INV_bit
0x009C       [0]    CM2_bit
0x009C       [1]    CMCON
0x009C       [0]    C1INV_bit
0x009C       [0]    CIS_bit
0x009D       [0]    CVR2_bit
0x009D       [0]    CVR1_bit
0x009D       [0]    CVR0_bit
0x009D       [0]    CVR3_bit
0x009D       [0]    CVREN_bit
0x009D       [0]    CVROE_bit
0x009D       [0]    CVRR_bit
0x009D       [1]    CVRCON
0x009E       [1]    ADRESL
0x009F       [0]    ADCS2_bit
0x009F       [0]    ADFM_bit
0x009F       [0]    PCFG1_bit
0x009F       [0]    PCFG0_bit
0x009F       [0]    PCFG3_bit
0x009F       [0]    PCFG2_bit
0x009F       [1]    ADCON1
0x010C       [1]    EEDATA
0x010D       [1]    EEADR
0x010E       [1]    EEDATH
0x010F       [1]    EEADRH
0x018C       [0]    WR_bit
0x018C       [0]    RD_bit
0x018C       [0]    WREN_bit
0x018C       [1]    EECON1
0x018C       [0]    EEPGD_bit
0x018C       [0]    WRERR_bit
0x018D       [1]    EECON2
//** Label List: ** 
//----------------------------------------------
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_crank28
  L_crank29
  L_crank30
  L_crank31
  L_crank32
  L_crank33
  L_crank34
  L_Poll35
  L_Poll36
  L_Poll37
  L_Poll38
  L_Poll39
  L_Poll40
  L_Poll41
  L_Poll42
  L_Poll43
  L_Poll44
  L_Poll45
  L_Poll46
  L__interrupt47
  L__main48
  L__crank49
  L__Poll50
  L__Poll51
  _interrupt
  L__interrupt52
  L__interrupt53
  L__interrupt54
  L__interrupt55
  _main
  _crank
  L__crank56
  L__crank57
  L__crank58
  L__crank59
  _Poll
  _CC2D_Loop1
  _____DoICP
  _____DoIFC
  ___CC2DW
  _Swap
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_crank28
  L_crank29
  L_crank30
  L_crank31
  L_crank32
  L_crank33
  L_crank34
  L_Poll35
  L_Poll36
  L_Poll37
  L_Poll38
  L_Poll39
  L_Poll40
  L_Poll41
  L_Poll42
  L_Poll43
  L_Poll44
  L_Poll45
  L_Poll46
  L__interrupt47
  L__main48
  L__crank49
  L__Poll50
  L__Poll51
  _interrupt
  L__interrupt52
  L__interrupt53
  L__interrupt54
  L__interrupt55
  _main
  _crank
  L__crank56
  L__crank57
  L__crank58
  L__crank59
  _Poll
